package pipeline

required_steps := {
    "DeployStep",
    "SmokeTestStep",
    "IntegrationTestStep"
}

allow[msg] {
    stage := input.pipeline.stages[_].stage
    stage.type == "Deployment"
    existing_steps := {s | s = stage.spec.execution.steps[_].step.type}
    missing_steps := required_steps - existing_steps
    count(missing_steps) == 0

    cpuUtilization := input.deployment.cpuUtilization
    memoryUtilization := input.deployment.memoryUtilization
    cpuUtilization < 80
    memoryUtilization < 90

    failure_strategy := stage.spec.execution.failure_strategy
    checkFailureStrategy(failure_strategy)
    not containserr
    msg := sprintf("Deployment stage '%s' is missing required steps: %v", [stage.name, missing_steps])
}

checkFailureStrategy(failure_strategy) {
    failure_strategy == "Failure"  # Update this condition based on your specific requirements
}

containserr {
    required_steps[required_step]
    not contains(existing_steps, required_step)
}
